{"meta":{"title":"Han壮壮","subtitle":"test hard","description":"","author":"HanJiangtao","url":"https://han-jiangtao.github.io","root":"/"},"pages":[],"posts":[{"title":"git_usage_records","slug":"git-usage-records","date":"2022-04-16T12:41:24.000Z","updated":"2022-04-16T05:05:07.864Z","comments":true,"path":"2022/04/16/git-usage-records/","link":"","permalink":"https://han-jiangtao.github.io/2022/04/16/git-usage-records/","excerpt":"","text":"使用git过程中的部分记录代理1234567891011121314151617181920212223242526# git config --system# 配置整个系统，全部用户操作生效# 配置内容写入/etc/gitconfig# git config --global# 配置当前用户，当前用户全局操作生效# 配置内容写入~/.gitconfig# git config --local# 配置当前git仓库，在当前git仓库生效# 配置内容写入.git/config# git config搜索顺序为.git/config-&gt;~/.git/config-&gt;/etc/gitconfig# 配置代理,ip和port根据自己的目标服务器配置git config --global https.proxy http://127.0.0.1:1080git config --global https.proxy https://127.0.0.1:1080# 关闭https的ssl验证git config http.sslVerify &quot;false&quot;# 取消代理git config --global --unset http.proxygit config --global --unset https.proxy submodule在一个git仓库里新引入submodule拉取已有submodule的远程仓库并完成本地子模块拉取","categories":[{"name":"经验","slug":"经验","permalink":"https://han-jiangtao.github.io/categories/%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"经验","slug":"经验","permalink":"https://han-jiangtao.github.io/tags/%E7%BB%8F%E9%AA%8C/"}]},{"title":"学习使用linux perf工具","slug":"perf-tools-learning","date":"2021-12-26T22:01:28.000Z","updated":"2022-04-16T05:05:07.864Z","comments":true,"path":"2021/12/26/perf-tools-learning/","link":"","permalink":"https://han-jiangtao.github.io/2021/12/26/perf-tools-learning/","excerpt":"","text":"本章记录学习使用perf工具的过程,以centos x86环境测试 安装perf：sudo yum install perf perf简单介绍perf –help可以查看perf支持的比较常用的参数列表及其功能 参数列表 功能 annotate Read perf.data (created by perf record) and display annotated code archive Create archive with object files with build-ids found in perf.data file bench General framework for benchmark suites buildid-cache Manage build-id cache. buildid-list List the buildids in a perf.data file c2c Shared Data C2C&#x2F;HITM Analyzer. config Get and set variables in a configuration file. data Data file related processing diff Read perf.data files and display the differential profile evlist List the event names in a perf.data file ftrace simple wrapper for kernel’s ftrace functionality inject Filter to augment the events stream with additional information kallsyms Searches running kernel for symbols kmem Tool to trace&#x2F;measure kernel memory properties kvm Tool to trace&#x2F;measure kvm guest os list List all symbolic event types lock Analyze lock events mem Profile memory accesses record Run a command and record its profile into perf.data report Read perf.data (created by perf record) and display the profile sched Tool to trace&#x2F;measure scheduler properties (latencies) script Read perf.data (created by perf record) and display trace output stat Run a command and gather performance counter statistics test Runs sanity tests. timechart Tool to visualize total system behavior during a workload top System profiling tool. version display the version of perf binary probe Define new dynamic tracepoints trace strace inspired tool perf record采集要分析的原始数据根据man perf-record查看其基本使用方法可以分为三个大区域默认前缀：perf recordrecord option（可选）: -g etc.command（为指定要采集的程序，如果使能本部分，则部分全局采集record option不可用）e.g. 12perf record -g -a #监控全部CPU,使能调用关系图perf record -g ./myapp myapp_arg1 myapp_arg2 #监控myapp，使能调用关系图 perf report未完","categories":[],"tags":[{"name":"经验","slug":"经验","permalink":"https://han-jiangtao.github.io/tags/%E7%BB%8F%E9%AA%8C/"}]},{"title":"定位linux应用收到sig=9问题","slug":"out-of-memory-locate","date":"2021-11-17T21:28:58.000Z","updated":"2022-04-16T05:05:07.864Z","comments":true,"path":"2021/11/17/out-of-memory-locate/","link":"","permalink":"https://han-jiangtao.github.io/2021/11/17/out-of-memory-locate/","excerpt":"","text":"我运行一个程序在服务器上，没有core文件产生，且程序异常退出，退出码为137（128+9）那么意味着我的程序，收到了一个kill -9信号，但是我十分确认的是，没有主动的去发送此信号google一下，大家遇到的exit code为137的问题多为oom（out of memory）我的环境是ubuntu x86_64内存1.5TB.ulimit -a查看max memory size为unlimited状态，且复现问题内存占用率较低，大概占了300GB左右 1117记录跟进首先还是怀疑是不是oom问题，需要通过信号量来实锤1.我尝试使用perf trace -e “kill”追踪signal，发现没有发送sigkill信号的行为2.尝试通过dmesg查看系统日志也没有发现sigkill信号3.现在我怀疑是不是我系统工具没有捕获到对应信号，自己又写了了简单的sleep脚本，手动发送kill -9信号，通过perf trace -e “kill”没有发现捕获到9信号4.查看perf trace help文档，使用perf trace -a跟踪所有trace，而不是单独的event，看到有捕获到9信号5.再次复现问题，perf trace -a依旧没有捕获到sig: kill信号6.dmesg同没有捕获到kill信号 1118记录跟进oom依旧是怀疑方向大哥帮忙找了一个大牛的脚本，进程内通信的signal全部能采集到，包括python的os.kill发送的0，但是唯独收到kill信号的主进程的这个信号没有捕获迹象重新试图使用&#x2F;sys&#x2F;kernel&#x2F;debug&#x2F;tracing配置捕捉deliver和gengerate的signal，第一次尝试也是唯独没有捕获到主进程消失的kill信号 1120记录跟进找到另一个os内核部门的大佬，perf record -e ‘signal:signal_generate’ –filter ‘sig&#x3D;&#x3D;9’ -g -a –call-graph dwarf跟进到了9信号是由pgrep杀死，查看发现pkill软连接到pgrep上，也就是有程序调用了系统命令pkill(违反了编码规范的)，grep全局代码发现自己承接的组件代码调用pkill -9 -P pid杀死了进程修改使用Process对象的terminate方法，进行压测，问题解决未复现 综上：1.不要违规使用前人血泪教训2.要学习使用perf工具和kernel debug","categories":[],"tags":[{"name":"经验","slug":"经验","permalink":"https://han-jiangtao.github.io/tags/%E7%BB%8F%E9%AA%8C/"},{"name":"linux,signal","slug":"linux-signal","permalink":"https://han-jiangtao.github.io/tags/linux-signal/"}]},{"title":"建站初衷","slug":"site-learning-objectives","date":"2021-10-20T22:59:52.000Z","updated":"2022-04-16T05:05:07.864Z","comments":true,"path":"2021/10/20/site-learning-objectives/","link":"","permalink":"https://han-jiangtao.github.io/2021/10/20/site-learning-objectives/","excerpt":"","text":"本站搭建旨在记录和指导自己的学习过程和目标利用hexo搭建一个基本的blog —- done 深入学习使用markdown语法 ---- doing markdown引申HTML —- hold markdown引申graphviz —- hold nginx —- hold perf —- hold bpftrace —- hold how init vimrc —- hold","categories":[],"tags":[{"name":"Flags","slug":"Flags","permalink":"https://han-jiangtao.github.io/tags/Flags/"}]},{"title":"基于GFM学习markdown","slug":"md-learning","date":"2021-10-20T22:29:55.000Z","updated":"2022-04-16T05:05:07.864Z","comments":true,"path":"2021/10/20/md-learning/","link":"","permalink":"https://han-jiangtao.github.io/2021/10/20/md-learning/","excerpt":"","text":"GitHub Flavored Markdown Spec 一、 文档分块 以0-3个空格开头且后跟多于三个-,_,*字符的形式分割主题块 建议以---,___,***为一行分割主题 markdown同HTML分为六级主题，以1-6个#字符，分别表示1-6级主题 # 一级主题## 二级主题### 三级主题#### 四级主题##### 五级主题###### 六级主题","categories":[],"tags":[{"name":"经验","slug":"经验","permalink":"https://han-jiangtao.github.io/tags/%E7%BB%8F%E9%AA%8C/"}]},{"title":"使用hexo和github搭建自己的blog","slug":"how-to-init-blog-by-hexo","date":"2021-10-16T22:40:53.000Z","updated":"2022-04-16T05:05:07.864Z","comments":true,"path":"2021/10/16/how-to-init-blog-by-hexo/","link":"","permalink":"https://han-jiangtao.github.io/2021/10/16/how-to-init-blog-by-hexo/","excerpt":"","text":"开始记录如何通过hexo和github搭建自己的blog网上蛮多教程在如何发布blog和管理blog本身内容语焉不详，我写这个教程主要是将整个端到端流程记录下来，包括如何将自己买的域名解析至github pages 1. 安装hexo（centos） yum install npm 安装npm包管理器 npm config set registry https://registry.npm.taobao.org 配置npm源 3.npm install -g hexo 安装hexo 2. 创建github个人pages仓库 登陆github创建仓库，仓库名要为username.github.io 如图： 这时github让开发者初始化仓库的界面如图： 完成上面两步，在git网站的操作也结束了，不用着急按照网站上提示初始化仓库，后续我们直接将hexo相关内容上传初始化网站 另外，本教程默认已经完成了你自己host的git环境已经ready，不再赘述安装git和ssh-key的添加 3. 本地hexo内容 mkdir -p blog创建工作目录 cd blog进入工作目录 hexo init初始化hexo内容 git init初始化git仓库如上2.2图片 git add . git commit -m “blog init” git branch -M source将源文件提交到source分支，后续gitpages在master分支展现 git remote add origin &#x67;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#111;&#109;:xxxx.git最后的这个git链接为2.2操作git网站的你自己的git仓链接 git push -u origin source 将hexo init完的内容推送至git仓库 4. 修改站点文件（即blog文件夹下的文体）以达到访问username.github.io来访问我们blog的目的 将下面内容添加至package.json（如果已经有就跳过） 1234567&#123; &quot;scripts&quot;: &#123; &quot;build&quot;: &quot;hexo generate&quot; &#125;, ...&#125; 新建.github&#x2F;workflows&#x2F;pages.yml，并添加如下内容： 1234567891011121314151617181920212223242526272829303132333435name: Pageson: push: branches: - source # default branchjobs: pages: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: submodules: &#x27;true&#x27; #敲重点，这里基本上没有已有教程会特意强调这里，这个with块，作用很大。详见附加内容1 - name: Use Node.js 12.x uses: actions/setup-node@v1 with: node-version: &#x27;12.x&#x27; - name: Cache NPM dependencies uses: actions/cache@v2 with: path: node_modules key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache restore-keys: | $&#123;&#123; runner.OS &#125;&#125;-npm-cache - name: Install Dependencies run: npm install - name: Build run: npm run build - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; publish_dir: ./public publish_branch: master # deploying branch 将上述两步的修改，推送至git仓库的source分支。访问username.github.io就可以看到hexo的欢迎页了。 5. 更换theme（建站换主题要一气呵成嘛） 选定一个自己喜欢的主题（直接在github搜索hexo-theme） 本教程以换用material为demo，图为material的git主页： 点击上图中fork按钮，fork至自己的仓库 git submodule init git submodule add &#x67;&#x69;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;:xxxxx&#x2F;hexo-theme-material.git themes&#x2F;material将我们fork出来的theme仓库，作为hexo的子模块（git链接为我们上面fork出来的仓库链接） git submodule sync git submodule update 上述两步将子模块内容拉取至本地 修改_config.yml中theme: xxxx为theme: material，theme:后面跟的是git theme子模块的文件夹的名字 git add .&amp;&amp; git commit -m “change theme” &amp;&amp; git push origin source将修改推送至git仓库，访问username.github.io看已经变成我们新更换的主题。 附加内容1. 在.github&#x2F;workflows&#x2F;pages.yml中添加的with代码块:我们在git仓库的source分支维护了hexo的源内容，包括本教程的后半部更换blog的theme，theme是在themes&#x2F;文件夹下维护的，且通过本教程通过git submodule来维护其链接，那么在git pages的action行为中，单拉git仓的source分支，是缺失了themes文件夹下内容的下载的，那么添加的with代码块的作用就是：git action的时候将source分支和themes submodule都下载，后续的action才能执行，详细的action行为可以在git仓库的actions页签查看。 2.hexo使能markdown表格不显示问题（直接显示源内容而不是表格）RE:与正文空两行即可","categories":[{"name":"经验","slug":"经验","permalink":"https://han-jiangtao.github.io/categories/%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"经验","slug":"经验","permalink":"https://han-jiangtao.github.io/tags/%E7%BB%8F%E9%AA%8C/"}]}],"categories":[{"name":"经验","slug":"经验","permalink":"https://han-jiangtao.github.io/categories/%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"经验","slug":"经验","permalink":"https://han-jiangtao.github.io/tags/%E7%BB%8F%E9%AA%8C/"},{"name":"linux,signal","slug":"linux-signal","permalink":"https://han-jiangtao.github.io/tags/linux-signal/"},{"name":"Flags","slug":"Flags","permalink":"https://han-jiangtao.github.io/tags/Flags/"}]}