<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git使用记录</title>
      <link href="/2022/04/16/git-usage-records/"/>
      <url>/2022/04/16/git-usage-records/</url>
      
        <content type="html"><![CDATA[<p>使用git过程中的部分记录</p><h1 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h1><p>git config –system<br>配置整个系统，全部用户操作生效<br>配置内容写入&#x2F;etc&#x2F;gitconfig</p><p>git config –global<br>配置当前用户，当前用户全局操作生效<br>配置内容写入~&#x2F;.gitconfig</p><p>git config –local<br>配置当前git仓库，在当前git仓库生效<br>配置内容写入.git&#x2F;config</p><p>git config搜索顺序为.git&#x2F;config-&gt;~&#x2F;.git&#x2F;config-&gt;&#x2F;etc&#x2F;gitconfig<br><img src="https://cdn.jsdelivr.net/gh/Han-Jiangtao/picgo/img/git_config_search.jpg" alt="git config search"></p><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置代理,ip和port根据自己的目标服务器配置</span></span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭https的ssl验证</span></span><br><span class="line">git config http.sslVerify <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="comment"># 或者可以使用如下方式单次不进行ssl验证并clone仓库</span></span><br><span class="line"><span class="built_in">env</span> GIT_SSL_NO_VERIFY=<span class="literal">true</span> git <span class="built_in">clone</span> https://......git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a>submodule</h1><h2 id="在一个git仓库里新引入submodule"><a href="#在一个git仓库里新引入submodule" class="headerlink" title="在一个git仓库里新引入submodule"></a>在一个git仓库里新引入submodule</h2><h2 id="拉取已有submodule的远程仓库并完成本地子模块拉取"><a href="#拉取已有submodule的远程仓库并完成本地子模块拉取" class="headerlink" title="拉取已有submodule的远程仓库并完成本地子模块拉取"></a>拉取已有submodule的远程仓库并完成本地子模块拉取</h2>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习使用linux perf工具</title>
      <link href="/2021/12/26/perf-tools-learning/"/>
      <url>/2021/12/26/perf-tools-learning/</url>
      
        <content type="html"><![CDATA[<p>本章记录学习使用perf工具的过程,以centos x86环境测试</p><p>安装perf：sudo yum install perf</p><h1 id="perf简单介绍"><a href="#perf简单介绍" class="headerlink" title="perf简单介绍"></a>perf简单介绍</h1><p>perf –help可以查看perf支持的比较常用的参数列表及其功能</p><table><thead><tr><th align="left">参数列表</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">annotate</td><td align="left">Read perf.data (created by perf record) and display annotated code</td></tr><tr><td align="left">archive</td><td align="left">Create archive with object files with build-ids found in perf.data file</td></tr><tr><td align="left">bench</td><td align="left">General framework for benchmark suites</td></tr><tr><td align="left">buildid-cache</td><td align="left">Manage build-id cache.</td></tr><tr><td align="left">buildid-list</td><td align="left">List the buildids in a perf.data file</td></tr><tr><td align="left">c2c</td><td align="left">Shared Data C2C&#x2F;HITM Analyzer.</td></tr><tr><td align="left">config</td><td align="left">Get and set variables in a configuration file.</td></tr><tr><td align="left">data</td><td align="left">Data file related processing</td></tr><tr><td align="left">diff</td><td align="left">Read perf.data files and display the differential profile</td></tr><tr><td align="left">evlist</td><td align="left">List the event names in a perf.data file</td></tr><tr><td align="left">ftrace</td><td align="left">simple wrapper for kernel’s ftrace functionality</td></tr><tr><td align="left">inject</td><td align="left">Filter to augment the events stream with additional information</td></tr><tr><td align="left">kallsyms</td><td align="left">Searches running kernel for symbols</td></tr><tr><td align="left">kmem</td><td align="left">Tool to trace&#x2F;measure kernel memory properties</td></tr><tr><td align="left">kvm</td><td align="left">Tool to trace&#x2F;measure kvm guest os</td></tr><tr><td align="left">list</td><td align="left">List all symbolic event types</td></tr><tr><td align="left">lock</td><td align="left">Analyze lock events</td></tr><tr><td align="left">mem</td><td align="left">Profile memory accesses</td></tr><tr><td align="left">record</td><td align="left">Run a command and record its profile into perf.data</td></tr><tr><td align="left">report</td><td align="left">Read perf.data (created by perf record) and display the profile</td></tr><tr><td align="left">sched</td><td align="left">Tool to trace&#x2F;measure scheduler properties (latencies)</td></tr><tr><td align="left">script</td><td align="left">Read perf.data (created by perf record) and display trace output</td></tr><tr><td align="left">stat</td><td align="left">Run a command and gather performance counter statistics</td></tr><tr><td align="left">test</td><td align="left">Runs sanity tests.</td></tr><tr><td align="left">timechart</td><td align="left">Tool to visualize total system behavior during a workload</td></tr><tr><td align="left">top</td><td align="left">System profiling tool.</td></tr><tr><td align="left">version</td><td align="left">display the version of perf binary</td></tr><tr><td align="left">probe</td><td align="left">Define new dynamic tracepoints</td></tr><tr><td align="left">trace</td><td align="left">strace inspired tool</td></tr></tbody></table><h2 id="perf-record"><a href="#perf-record" class="headerlink" title="perf record"></a>perf record</h2><p>采集要分析的原始数据</br><br>根据man perf-record查看其基本使用方法</br><br>可以分为三个大区域</br><br>默认前缀：perf record</br><br>record option（可选）: -g etc.</br><br>command（为指定要采集的程序，如果使能本部分，则部分全局采集record option不可用）</br><br>e.g.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perf record -g -a <span class="comment">#监控全部CPU,使能调用关系图</span></span><br><span class="line">perf record -g ./myapp myapp_arg1 myapp_arg2 <span class="comment">#监控myapp，使能调用关系图</span></span><br></pre></td></tr></table></figure><h2 id="perf-report"><a href="#perf-report" class="headerlink" title="perf report"></a>perf report</h2><p><code>未完</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定位linux应用收到sig=9问题</title>
      <link href="/2021/11/17/out-of-memory-locate/"/>
      <url>/2021/11/17/out-of-memory-locate/</url>
      
        <content type="html"><![CDATA[<p>我运行一个程序在服务器上，没有core文件产生，且程序异常退出，退出码为137（128+9）<br>那么意味着我的程序，收到了一个kill -9信号，但是我十分确认的是，没有主动的去发送此信号<br>google一下，大家遇到的exit code为137的问题多为oom（out of memory）我的环境是ubuntu x86_64内存1.5TB.<br>ulimit -a查看max memory size为unlimited状态，且复现问题内存占用率较低，大概占了300GB左右    </p><p>1117记录跟进<br><br>首先还是怀疑是不是oom问题，需要通过信号量来实锤<br><br>1.我尝试使用perf trace -e “kill”追踪signal，发现没有发送sigkill信号的行为<br><br>2.尝试通过dmesg查看系统日志也没有发现sigkill信号<br><br>3.现在我怀疑是不是我系统工具没有捕获到对应信号，自己又写了了简单的sleep脚本，手动发送kill -9信号，通过perf trace -e “kill”没有发现捕获到9信号<br><br>4.查看perf trace help文档，使用perf trace -a跟踪所有trace，而不是单独的event，看到有捕获到9信号<br><br>5.再次复现问题，perf trace -a依旧没有捕获到sig: kill信号<br><br>6.dmesg同没有捕获到kill信号<br></p><p>1118记录跟进<br><br>oom依旧是怀疑方向<br><br>大哥帮忙找了一个<a href="https://github.com/brendangregg/perf-tools">大牛的脚本</a>，进程内通信的signal全部能采集到，包括python的os.kill发送的0，但是唯独收到kill信号的主进程的这个信号没有捕获迹象<br><br>重新试图使用&#x2F;sys&#x2F;kernel&#x2F;debug&#x2F;tracing配置捕捉deliver和gengerate的signal，第一次尝试也是唯独没有捕获到主进程消失的kill信号<br></p><p>1120记录跟进<br><br>找到另一个os内核部门的大佬，perf record -e ‘signal:signal_generate’ –filter ‘sig&#x3D;&#x3D;9’ -g -a –call-graph dwarf<br>跟进到了9信号是由pgrep杀死，查看发现pkill软连接到pgrep上，也就是有程序调用了系统命令pkill(违反了编码规范的)，grep全局代码发现自己承接的组件代码调用pkill -9 -P pid杀死了进程<br>修改使用Process对象的terminate方法，进行压测，问题解决未复现</p><p>综上：<br>1.不要违规使用前人血泪教训<br>2.要学习使用perf工具和kernel debug</p>]]></content>
      
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> linux,signal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站初衷</title>
      <link href="/2021/10/20/site-learning-objectives/"/>
      <url>/2021/10/20/site-learning-objectives/</url>
      
        <content type="html"><![CDATA[<h2 id="本站搭建旨在记录和指导自己的学习过程和目标"><a href="#本站搭建旨在记录和指导自己的学习过程和目标" class="headerlink" title="本站搭建旨在记录和指导自己的学习过程和目标"></a>本站搭建旨在记录和指导自己的学习过程和目标</h2><p><del><a href="/2021/10/16/how-to-init-blog-by-hexo/" title="利用hexo搭建一个基本的blog">利用hexo搭建一个基本的blog</a></del> —- done</p><a href="/2021/10/20/md-learning/" title="深入学习使用markdown语法">深入学习使用markdown语法</a> ---- doing<p>markdown引申HTML —- hold</p><p>markdown引申graphviz —- hold</p><p>nginx —- hold</p><p>perf —- hold</p><p>bpftrace —- hold</p><p>how init vimrc —- hold</p>]]></content>
      
      
      
        <tags>
            
            <tag> Flags </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于GFM学习markdown</title>
      <link href="/2021/10/20/md-learning/"/>
      <url>/2021/10/20/md-learning/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.github.com/gfm/">GitHub Flavored Markdown Spec</a></p><hr><h1 id="一、-文档分块"><a href="#一、-文档分块" class="headerlink" title="一、 文档分块"></a>一、 文档分块</h1><ul><li>以0-3个空格开头且后跟多于三个<code>-</code>,<code>_</code>,<code>*</code>字符的形式分割主题块<blockquote><p>建议以<code>---</code>,<code>___</code>,<code>***</code>为一行分割主题</p></blockquote></li><li>markdown同HTML分为六级主题，以1-6个<code>#</code>字符，分别表示1-6级主题<blockquote><p><code># 一级主题</code><br><code>## 二级主题</code><br><code>### 三级主题</code><br><code>#### 四级主题</code><br><code>##### 五级主题</code><br><code>###### 六级主题</code></p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo和github搭建自己的blog</title>
      <link href="/2021/10/16/how-to-init-blog-by-hexo/"/>
      <url>/2021/10/16/how-to-init-blog-by-hexo/</url>
      
        <content type="html"><![CDATA[<p>开始记录如何通过hexo和github搭建自己的blog<br>网上蛮多教程在如何发布blog和管理blog本身内容语焉不详，我写这个教程主要是将整个端到端流程记录下来，包括如何将自己买的域名解析至github pages</p><h1 id="1-安装hexo（centos）"><a href="#1-安装hexo（centos）" class="headerlink" title="1. 安装hexo（centos）"></a>1. 安装hexo（centos）</h1><blockquote><ol><li>yum install npm 安装npm包管理器</li><li>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 配置npm源</li></ol><p>3.npm install -g hexo 安装hexo</p></blockquote><h1 id="2-创建github个人pages仓库"><a href="#2-创建github个人pages仓库" class="headerlink" title="2. 创建github个人pages仓库"></a>2. 创建github个人pages仓库</h1><blockquote><ol><li>登陆github创建仓库，仓库名要为username.github.io 如图：<img src="/2021/10/16/how-to-init-blog-by-hexo/git_pages_create.jpg" class=""></li><li>这时github让开发者初始化仓库的界面如图：<img src="/2021/10/16/how-to-init-blog-by-hexo/git_init.jpg" class=""></li><li>完成上面两步，在git网站的操作也结束了，不用着急按照网站上提示初始化仓库，后续我们直接将hexo相关内容上传初始化网站</li><li>另外，本教程默认已经完成了你自己host的git环境已经ready，不再赘述安装git和ssh-key的添加</li></ol></blockquote><h1 id="3-本地hexo内容"><a href="#3-本地hexo内容" class="headerlink" title="3. 本地hexo内容"></a>3. 本地hexo内容</h1><blockquote><ol><li>mkdir -p blog创建工作目录</li><li>cd blog进入工作目录</li><li>hexo init初始化hexo内容</li><li>git init初始化git仓库如上2.2图片</li><li>git add .</li><li>git commit -m “blog init”</li><li>git branch -M source将源文件提交到source分支，后续gitpages在master分支展现</li><li>git remote add origin <a href="mailto:&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;</a>:xxxx.git最后的这个git链接为2.2操作git网站的你自己的git仓链接</li><li>git push -u origin source 将hexo init完的内容推送至git仓库</li></ol></blockquote><h1 id="4-修改站点文件（即blog文件夹下的文体）以达到访问username-github-io来访问我们blog的目的"><a href="#4-修改站点文件（即blog文件夹下的文体）以达到访问username-github-io来访问我们blog的目的" class="headerlink" title="4. 修改站点文件（即blog文件夹下的文体）以达到访问username.github.io来访问我们blog的目的"></a>4. 修改站点文件（即blog文件夹下的文体）以达到访问username.github.io来访问我们blog的目的</h1><blockquote><ol><li>将下面内容添加至package.json（如果已经有就跳过）</li></ol></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>新建.github&#x2F;workflows&#x2F;pages.yml，并添加如下内容：</li></ol></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">source</span>  <span class="comment"># default branch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="string">&#x27;true&#x27;</span> <span class="comment">#敲重点，这里基本上没有已有教程会特意强调这里，这个with块，作用很大。详见附加内容1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">12.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">master</span>  <span class="comment"># deploying branch</span></span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>将上述两步的修改，推送至git仓库的source分支。访问username.github.io就可以看到hexo的欢迎页了。</li></ol></blockquote><h1 id="5-更换theme（建站换主题要一气呵成嘛）"><a href="#5-更换theme（建站换主题要一气呵成嘛）" class="headerlink" title="5. 更换theme（建站换主题要一气呵成嘛）"></a>5. 更换theme（建站换主题要一气呵成嘛）</h1><blockquote><ol><li>选定一个自己喜欢的主题（直接在github搜索hexo-theme）</li><li>本教程以换用material为demo，图为material的git主页： <img src="/2021/10/16/how-to-init-blog-by-hexo/hexo-theme-material.jpg" class=""></li><li>点击上图中fork按钮，fork至自己的仓库</li><li>git submodule init</li><li>git submodule add <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;">&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a>:xxxxx&#x2F;hexo-theme-material.git themes&#x2F;material将我们fork出来的theme仓库，作为hexo的子模块（git链接为我们上面fork出来的仓库链接）</li><li>git submodule sync</li><li>git submodule update 上述两步将子模块内容拉取至本地</li><li>修改_config.yml中theme: xxxx为theme: material，theme:后面跟的是git theme子模块的文件夹的名字</li><li>git add .&amp;&amp; git commit -m “change theme” &amp;&amp; git push origin source将修改推送至git仓库，访问username.github.io看已经变成我们新更换的主题。</li></ol></blockquote><h1 id="附加内容"><a href="#附加内容" class="headerlink" title="附加内容"></a>附加内容</h1><h2 id="1-在-github-x2F-workflows-x2F-pages-yml中添加的with代码块"><a href="#1-在-github-x2F-workflows-x2F-pages-yml中添加的with代码块" class="headerlink" title="1. 在.github&#x2F;workflows&#x2F;pages.yml中添加的with代码块:"></a>1. 在.github&#x2F;workflows&#x2F;pages.yml中添加的with代码块:</h2><p>我们在git仓库的source分支维护了hexo的源内容，包括本教程的后半部更换blog的theme，theme是在themes&#x2F;文件夹下维护的，且通过本教程通过git submodule来维护其链接，那么在git pages的action行为中，单拉git仓的source分支，是缺失了themes文件夹下内容的下载的，那么添加的with代码块的作用就是：git action的时候将source分支和themes submodule都下载，后续的action才能执行，详细的action行为可以在git仓库的actions页签查看。</p><h2 id="2-hexo使能markdown表格不显示问题（直接显示源内容而不是表格）"><a href="#2-hexo使能markdown表格不显示问题（直接显示源内容而不是表格）" class="headerlink" title="2.hexo使能markdown表格不显示问题（直接显示源内容而不是表格）"></a>2.hexo使能markdown表格不显示问题（直接显示源内容而不是表格）</h2><p>RE:与正文空两行即可</p>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
